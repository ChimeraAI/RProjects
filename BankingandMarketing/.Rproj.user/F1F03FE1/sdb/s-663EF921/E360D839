{
    "collab_server" : "",
    "contents" : "# Use randomForest algorithm to make binary classification with random search for hypertuning parameters\n#Load libraries\nlibrary(data.table)\nlibrary(caret)\nlibrary(xgboost)\nlibrary(mlr)\nlibrary(caTools)\n\n#Read and separate raw data\nrawData <- read.csv(\"bank-full.csv\", sep = \";\", header = TRUE)\n\n#Convert to DataFrame\nsetDT(rawData)\n\n#Check for missing data\nsapply(rawData, function(x) sum(is.na(x))/length(x))\n\n#Set seed\nset.seed(11)\n\n#Split rawData into training and testing data\ntempData <- sample.split(rawData$y, SplitRatio = 0.7)\ntrainData <- rawData[tempData]\ntestData <- rawData[!tempData]\n\n#Check for data imbalance between train and test data\nsetDT(trainData)[,.N/nrow(trainData),y]\nsetDT(testData)[,.N/nrow(testData),y]\n\n#Convert characters to factors\nfact_col <- colnames(trainData)[sapply(trainData,is.character)]\n\nfor(i in fact_col) set(trainData,j=i,value = factor(trainData[[i]]))\nfor (i in fact_col) set(testData,j=i,value = factor(testData[[i]]))\n\n# Perform one hot encoding\ntraintask <- createDummyFeatures (obj = traintask)\ntesttask <- createDummyFeatures (obj = testtask)\n\n#Create Tasks\ntraintask <- makeClassifTask (data = trainData,target = \"y\")\ntesttask <- makeClassifTask (data = testData,target = \"y\")\n\nrf.lrn <- makeLearner(\"classif.randomForest\")\n\n#Random Forest Tuning\ngetParamSet(rf.lrn)\nrf.lrn$par.vals <- list(ntree = 100L,\n                        importance=TRUE)\n\n#set parameter space\nparams <- makeParamSet(\n  makeIntegerParam(\"mtry\",lower = 2,upper = 10),\n  makeIntegerParam(\"nodesize\",lower = 10,upper = 50)\n)\n\n#set validation strategy\nrdesc <- makeResampleDesc(\"CV\",iters=10L)\n\n#Random Search\nctrl <- makeTuneControlRandom(maxit = 10L)\n\nlibrary(parallelMap)\nlibrary(parallel)\nparallelStartSocket(cpus = detectCores())\n\ntune <- tuneParams(learner = rf.lrn\n                   ,task = traintask\n                   ,resampling = rdesc\n                   ,measures = list(acc)\n                   ,par.set = params\n                   ,control = ctrl\n                   ,show.info = T)\n\n#stop parallelization\nparallelStop()\n\n\n\n",
    "created" : 1504207433525.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4032813266",
    "id" : "E360D839",
    "lastKnownWriteTime" : 1504208937,
    "last_content_update" : 1504208937598,
    "path" : "~/GitHub/RProjects/BankingandMarketing/Bagging.R",
    "project_path" : "Bagging.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}